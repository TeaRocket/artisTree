#!/usr/bin/env node
const User = require("../models/User");
const http = require("http");
const socket = require("../socket");

let app = require("../app");

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.json("not-found");
});

app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.json("error");
  }
});

let server = http.createServer(app);
socket.io = require("socket.io")(server);

socket.io.on("connection", (socket) => {
  // console.log("New client connected" + socket.id);
  // console.log(socket);

  socket.on("join", ({ userId }) => {
    console.log("user connected");
    User.findByIdAndUpdate(userId, { socket: socket.id }, { new: true })
      .then((user) => console.log(user.socket))
      .catch((err) => console.log(err));
  });

  // disconnect is fired when a client leaves the server
  socket.on("leave", () => {
    User.findOneAndUpdate(
      { socket: socket.id },
      { socket: null },
      { new: true }
    )
      .then((user) => console.log(user))
      .catch((err) => console.log(err));
  });
});

server.on("error", (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
